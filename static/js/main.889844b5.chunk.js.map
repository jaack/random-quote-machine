{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","useStyles","makeStyles","root","display","justifyContent","backgroundColor","backgroundImage","minHeight","paper","padding","spacing","width","height","position","typography","hyphens","wordWrap","fontFamily","fontWeight","fontSize","breakpoints","up","quote","flexDirection","alignItems","author","removeicon","verticalAlign","twittericon","bottom","right","button","left","Boolean","window","location","hostname","match","ReactDOM","render","classes","useState","setQuote","setAuthor","handleClick","randomKey","Math","floor","random","newQuote","quoteList","useEffect","ThemeProvider","className","Grid","container","justify","Paper","id","variant","elevation","fadeOutTransitionDuration","fadeInTransitionDuration","Typography","show","Tooltip","title","placement","IconButton","edge","href","target","rel","Button","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAgBMA,EAAQC,cAGRC,EAAYC,aAAW,SAAAH,GAAK,YAAK,CACrCI,KAAM,CACJC,QAAS,OACTC,eAAgB,SAChBC,gBAAiB,UACjBC,gBAAgB,ilBAEhBC,UAAW,SAEbC,MAAO,CACLC,QAASX,EAAMY,QAAQ,GACvBC,MAAO,OACPC,OAAQ,OACRP,gBAAiB,UACjBQ,SAAU,YAIZC,WAAW,aACTC,QAAS,OACTC,SAAU,aACVC,WAAY,6BACZC,WAAY,SACZC,SAAU,UACTrB,EAAMsB,YAAYC,GAAG,MAAQ,CAC9BF,SAAU,SAIZG,MAAO,CACLnB,QAAS,OACToB,cAAe,SACfnB,eAAgB,SAChBoB,WAAY,SACZZ,OAAQ,QAEVa,QAAM,GACJN,SAAU,UADN,cAEHrB,EAAMsB,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,WAHR,2BAKQ,UALR,2BAMQ,UANR,2BAOQ,6BAPR,0BAQO,SARP,yBASM,YATN,uBAUI,OAVJ,sBAWG,MAXH,GAaNO,WAAY,CACVC,cAAe,UAEjBC,YAAa,CACXf,SAAU,WACVgB,OAAQ,OACRC,MAAO,QAETC,OAAO,aACLlB,SAAU,WACVgB,OAAQ,QACP/B,EAAMsB,YAAYC,GAAG,MAAQ,CAC5BW,KAAM,aCpEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFgFD,WACb,IAAMC,EAAUxC,IADY,EAEFyC,mBAAS,yCAFP,mBAErBnB,EAFqB,KAEdoB,EAFc,OAGAD,mBAAS,WAHT,mBAGrBhB,EAHqB,KAGbkB,EAHa,OAIEF,qBAJF,mBAM7B,SAASG,IACP,IAAIC,EAAYC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAC9CC,EAAWC,EAAUL,GACzBH,EAASO,EAAS3B,OAClBqB,EAAUM,EAASxB,QAQpB,OAlB4B,UAc7B0B,qBAAU,WACRP,MACC,IAGA,kBAACQ,EAAA,EAAD,CAAetD,MAAOA,GACpB,yBAAKuD,UAAWb,EAAQtC,MACtB,kBAACoD,EAAA,EAAD,CACEC,WAAS,EACT7C,QAAS,EACTc,WAAW,SACXgC,QAAQ,UAER,kBAACC,EAAA,EAAD,CAAOC,GAAG,YAAYC,QAAQ,WAAWC,UAAU,IAAIP,UAAWb,EAAQhC,OACtE,kBAAC,IAAD,CAAOqD,0BAA0B,MAAMC,yBAAyB,OAC9D,yBAAKJ,GAAG,QAAQL,UAAWb,EAAQlB,OACnC,kBAACyC,EAAA,EAAD,CAAYC,KAAK,OAAON,GAAG,OAAML,UAAWb,EAAQ1B,YAApD,SAAkEQ,EAAlE,YAEA,kBAACyC,EAAA,EAAD,CAAYL,GAAG,SAASL,UAAWb,EAAQf,QAAQ,kBAAC,IAAD,CAAY4B,UAAWb,EAAQd,aAAcD,IAEpG,kBAACwC,EAAA,EAAD,CAASC,MAAM,oBAAoBC,UAAU,OAC3C,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQhB,UAAWb,EAAQZ,aAC1C,uBAAG8B,GAAG,cAAcY,KAAM,yCAA0ChD,EAAO,KAAMG,EAAQ8C,OAAO,SAASC,IAAI,uBAC3G,kBAAC,IAAD,CAAarD,SAAS,aAI5B,kBAACsD,EAAA,EAAD,CAAQf,GAAG,YAAYL,UAAWb,EAAQT,OAAQ2C,QAAS9B,EAAae,QAAQ,aAAhF,mBEzHI,MAASgB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.889844b5.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport Fade from '@material-ui/core/Fade';\nimport quoteList from './quotes.json';\nimport Fader from 'react-fader'\n\nconst theme = createMuiTheme();\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: '#3c3c3c',\n    backgroundImage:  `background-color: #3c3c3c;\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='hexagons' fill='%23979797' fill-opacity='0.05' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");`,\n    minHeight: '100vh'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: '60vw',\n    height: '40vh',\n    backgroundColor: '#E5E5E5',\n    position: 'relative',\n\n\n  },\n  typography: {\n    hyphens: 'auto',\n    wordWrap: 'break-word',\n    fontFamily: \" 'Inconsolata', sans-serif\",\n    fontWeight: 'normal',\n    fontSize: '1.2rem',\n    [theme.breakpoints.up('sm')]: {\n    fontSize: '2rem',\n  }\n    \n  },\n  quote: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '25vh',\n  },\n  author: {\n    fontSize: '1.5rem',\n    [theme.breakpoints.up(\"sm\")]: {\n      fontSize: '2.2rem'\n    },\n    whiteSpace: 'nowrap',\n    fontWeight: 'normal',\n    fontFamily: \"'Inconsolata', sans-serif\",\n    textAlign: 'right',\n    position: 'absolute',\n    bottom: '20%',\n    right: '5%',\n  },\n  removeicon: {\n    verticalAlign: 'middle',\n  },\n  twittericon: {\n    position: 'absolute',\n    bottom: '10px',\n    right: '25px'\n  },\n  button: {\n    position: 'absolute',\n    bottom: '25px',\n    [theme.breakpoints.up('sm')]: {\n      left: '25px',\n    }\n  }\n\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [quote, setQuote] = useState(\"They've got up the ventilation shaft!\")\n  const [author, setAuthor] = useState(\"Tey How\")\n  const [visible, setVisible] = useState()\n\n function handleClick() {\n   let randomKey = Math.floor((Math.random() * 18) + 1);\n   let newQuote = quoteList[randomKey]\n   setQuote(newQuote.quote)\n   setAuthor(newQuote.author)\n\n }\n\n useEffect(() => {\n   handleClick()\n }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <Grid\n          container\n          spacing={0}\n          alignItems=\"center\"\n          justify=\"center\"\n        >\n          <Paper id=\"quote-box\" variant=\"outlined\" elevation=\"0\" className={classes.paper}>\n              <Fader fadeOutTransitionDuration=\"300\" fadeInTransitionDuration=\"300\">\n                <div id=\"quote\" className={classes.quote}>\n                <Typography show=\"true\" id=\"text\"className={classes.typography}>“{quote}” </Typography>\n                </div>\n                <Typography id=\"author\" className={classes.author}><RemoveIcon className={classes.removeicon}/>{author}</Typography>\n              </Fader>\n            <Tooltip title=\"Tweet this quote!\" placement=\"top\">\n              <IconButton edge=\"start\" className={classes.twittericon}>\n                <a id=\"tweet-quote\" href={\"https://twitter.com/intent/tweet?text=\"+ quote +\" ~\"+ author} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <TwitterIcon fontSize=\"large\"/>\n                </a>\n              </IconButton>\n            </Tooltip>\n            <Button id=\"new-quote\" className={classes.button} onClick={handleClick} variant=\"contained\">New Quote</Button>\n          </Paper>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}